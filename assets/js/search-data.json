{
  
    
        "post0": {
            "title": "Git And Github   In A Simple Way",
            "content": "Git and GitHub - In a simple way! . Why would you care? . Do you want to develop the code? Do you want to manage it? You want to know when and what changes you made? Do you want to collaborate with your team? Do you want to see and review what others are developing? Do you want to maintain history? . Good news! This all can be done using Git and GitHub!! . What are Git and GitHub? . Git - . Git is an extremely popular version control system that gives you the power to manage, review and restore earlier versions of saved programs/codes of your project. It is installed and maintained on your local machine. . GitHub - . It is a cloud-based service that uses git to stores the code that you developed in your local machine to the cloud which can be shared, reviewed by the team or other people. The user interface is extremely intuitive and provides programmers with built-in control and task-management tools. . Now, let’s dig a little deep into some Terminologies used in Git and Github: . Snapshots . This is how your code looks at a certain time . | | Repo . Also called a repository . | It is a collection of all the files and history of those files or basically contains all of the commits . | A software project can be one repo having submodules or in a complex case, it can be divided into multiple repos. . | | Branch . A branch is a lightweight pointer to one of the commits . | The default branch name in git is master . | Every time there is a new commit, the branch pointer moves forward. . | There can be many, many branches. For example, for a software project, branches can be staging, development, and production. . | | Commits . It is used to take the snapshot of your code . | It contains three pieces of info . Info about how files changed from the previous snapshot . | A reference to the previous commit called parent commit . | A hash code to uniquely identify the commit . | | | Merging . People work on different branches and finally merge the changes in the main branch. For example, feature-1 branch has new code which needs to be deployed onto the production server then a person can merge this feature-1 branch into the master which will be finally deployed onto the production server. . | | GitHub Features . People can push a local repository created by git to their or organization’s GitHub account. Repo on GitHub is called remote repo. Also, They can pull remote repo to a local directory. So, basically, Github hosts remote repositories for a better team collaboration . | It enables you to use git operations via UI and also review branch merges via pull requests. Pull requests are raised when a person wants to merge one branch into another. for e.g merging the development branch into production can be done by creating PR so that the code owner can review the new changes. . | New features like GitHub actions allow you to do automate the CICD process. . | Now let’s see these terms and relate them : . Local repository(present in your local system) - This image shows local repo “Labzen” and the default branch “main” . | . Remote Repository(present on Github.com or enterprise) with default branch “main” . | . Now, let’s see the high level working of git and Github . Create a repo on the local system/copy(clone in git world) repo from remote(that is from GIthub.com) . | Make some modifications different files as per your requirement . | Add those files - add the changes in the staging area (where you would keep the files before committing the changes) . | Commit those files - add the changes in the repository (that is new snapshot of your change is captured in the history) . | Push those files - push the changes to remote so that your remote and local is synced . | Merge those files on github.com when collaborating with your team . | Let’s us actually implement the steps: . Create a repo on the local system/copy(clone in git world) repo from remote(that is from GIthub.com) . | 1) &gt; I have created a repo on Github.com . . 2) &gt; Copy the remote repo so that we can clone it on the local machine . . 3) &gt; Clone to remote repo to local machine . . Make some modifications different files as per your requirement . | I am making changes to the README.md file. Open any editor to edit the file. . Add those files . | Go to root of your repo . . Add, Commit and Push the changes from local repo to remote repo . | . Check on GIthub.com to see the changes . | . Ahaaa! You are done! . Your first repo is created. Congratulations! . Git &amp; GitHub user guide . Installation and configuration . Installation . | Configuration . | To authenticate with the organization’s GitHub account, you need to add an ssh key to the GitHub account. Follow this process . | | Create repo . Create and enter into your project directory and use the command “git init“.This will create a “.git” directory inside your project folder which will have all the git files for .e.g logs/index . | For e.g. . mkdir git_learn . | cd git_learn . | git init . | | we need to set up the remote repo . Command - “git remote add origin git@GitHub.com:{username}/git_learn” . | | Push the local branch to remote . Command ‘git push -u origin master’ . | Git push is used to push local changes to the remote repo . | Git pull is used to pull remote repo changes to your local repo for e.g. changes which are made by other team members. . | | | Add files . Once you add some files to the project they will be counted as untracked files until they are not added to git . | .gitignore file is used to ignore the directory and files which we don’t want to add to the git . | “git add {file_name}/{directory}” is used to add files/directories.You can also use a relative path. . | Now, these files are added but they are still not committed. Currently, git started just tracking them. . | | Commit Files . To commit the file we use “git commit -m ‘commit message’ ” . | Now we took the snapshot of our code. So, how many commits we made, we can always revert to this commit and start work from this commit. . | Git commit messages are about why this commit was made. This is helpful for reviews. . | Now will use git push again to push changes to remote . git push -u origin master . | | |",
            "url": "https://sukh2929.github.io/Git-and-Github/2021/03/28/Git-and-Github-In-a-simple-way.html",
            "relUrl": "/2021/03/28/Git-and-Github-In-a-simple-way.html",
            "date": " • Mar 28, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://sukh2929.github.io/Git-and-Github/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://sukh2929.github.io/Git-and-Github/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://sukh2929.github.io/Git-and-Github/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://sukh2929.github.io/Git-and-Github/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}